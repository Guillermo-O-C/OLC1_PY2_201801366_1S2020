/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,7,10],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[13,16,17,23,25,26,27,28],$Vc=[1,29],$Vd=[2,125],$Ve=[1,37],$Vf=[9,36],$Vg=[2,123],$Vh=[1,40],$Vi=[2,25],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,54],$Vp=[1,51],$Vq=[1,50],$Vr=[1,52],$Vs=[1,53],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,69],$Vy=[1,68],$Vz=[1,70],$VA=[1,71],$VB=[9,20,33,62,76,77,78,79,87,88,89,90,91,92,93,94],$VC=[2,31],$VD=[1,79],$VE=[1,95],$VF=[1,87],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,91],$VP=[1,92],$VQ=[1,93],$VR=[1,94],$VS=[2,103],$VT=[2,8,13,23,25,26,27,28,39,42,44,45,48,51,56],$VU=[1,127],$VV=[9,20,33,62,76,77,87,88,89,90,91,92,93,94],$VW=[2,105],$VX=[1,134],$VY=[1,146],$VZ=[1,138],$V_=[1,139],$V$=[1,140],$V01=[1,141],$V11=[1,142],$V21=[1,143],$V31=[1,144],$V41=[1,145],$V51=[1,157],$V61=[1,173],$V71=[1,163],$V81=[1,164],$V91=[1,165],$Va1=[1,166],$Vb1=[1,167],$Vc1=[1,168],$Vd1=[1,169],$Ve1=[1,172],$Vf1=[1,170],$Vg1=[1,171],$Vh1=[1,178],$Vi1=[1,176],$Vj1=[1,177],$Vk1=[9,20],$Vl1=[9,20,93,94],$Vm1=[2,8,13,23,25,26,27,28,39,42,44,45,48,51,56,58,59,61,63],$Vn1=[1,258],$Vo1=[1,248],$Vp1=[1,249],$Vq1=[1,250],$Vr1=[1,251],$Vs1=[1,252],$Vt1=[1,253],$Vu1=[1,254],$Vv1=[1,257],$Vw1=[1,255],$Vx1=[1,256],$Vy1=[1,323],$Vz1=[2,101],$VA1=[1,360],$VB1=[13,61,63],$VC1=[1,365],$VD1=[1,363],$VE1=[1,364],$VF1=[8,18,76,80,81,82,83,84,85,95],$VG1=[1,383],$VH1=[2,113],$VI1=[1,388],$VJ1=[2,66],$VK1=[1,417];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"R_IMPORT":7,"IDENTIFICADOR":8,"PUNTO_COMA":9,"R_CLASS":10,"ABRIR_LLAVE":11,"classBody":12,"CERRAR_LLAVE":13,"classActions":14,"declaracion":15,"asignacion":16,"R_VOID":17,"ABRIR_PARENTESIS":18,"parametros":19,"CERRAR_PARENTESIS":20,"sentenciasVoid":21,"R_MAIN":22,"R_INTEGER":23,"declaracion_p":24,"R_DOUBLE":25,"R_STRING":26,"R_BOOLEAN":27,"R_CHAR":28,"listaID":29,"defincion_var":30,"sentencias":31,"parametros_p":32,"COMA":33,"sentencia":34,"declaracion_var":35,"IGUAL":36,"expresion":37,"argumentos":38,"R_IF":39,"condicion":40,"elseIf":41,"R_WHILE":42,"sentenciasBreak":43,"R_DO":44,"R_SWITCH":45,"casos":46,"default":47,"R_FOR":48,"for_init":49,"for_change":50,"R_SYSTEM":51,"PUNTO":52,"R_OUT":53,"R_PRINT":54,"R_PRINTLN":55,"R_RETURN":56,"sentenciaBreak":57,"R_BREAK":58,"R_CONTINUE":59,"caso":60,"R_CASE":61,"DOS_PUNTOS":62,"R_DEFAULT":63,"sentenciaVoid":64,"sentenciasVoidBreak":65,"casosVoid":66,"defaultVoid":67,"sentenciaVoidBreak":68,"casoVoid":69,"argumentos_P":70,"INCREMENTO":71,"DECREMENTO":72,"R_ELSE":73,"elseIf_P":74,"listaID_P":75,"MENOS":76,"MAS":77,"MULTIPLICACION":78,"DIVISION":79,"ENTERO":80,"DECIMAL":81,"CARACTER":82,"R_TRUE":83,"R_FALSE":84,"CADENA":85,"expresion_relacional":86,"MAYOR":87,"MENOR":88,"MAYOR_IGUAL":89,"MENOR_IGUAL":90,"IGUALDAD":91,"DISTINTO":92,"AND":93,"OR":94,"NOT":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"R_IMPORT",8:"IDENTIFICADOR",9:"PUNTO_COMA",10:"R_CLASS",11:"ABRIR_LLAVE",13:"CERRAR_LLAVE",16:"asignacion",17:"R_VOID",18:"ABRIR_PARENTESIS",20:"CERRAR_PARENTESIS",22:"R_MAIN",23:"R_INTEGER",25:"R_DOUBLE",26:"R_STRING",27:"R_BOOLEAN",28:"R_CHAR",33:"COMA",36:"IGUAL",39:"R_IF",42:"R_WHILE",44:"R_DO",45:"R_SWITCH",48:"R_FOR",51:"R_SYSTEM",52:"PUNTO",53:"R_OUT",54:"R_PRINT",55:"R_PRINTLN",56:"R_RETURN",58:"R_BREAK",59:"R_CONTINUE",61:"R_CASE",62:"DOS_PUNTOS",63:"R_DEFAULT",71:"INCREMENTO",72:"DECREMENTO",73:"R_ELSE",76:"MENOS",77:"MAS",78:"MULTIPLICACION",79:"DIVISION",80:"ENTERO",81:"DECIMAL",82:"CARACTER",83:"R_TRUE",84:"R_FALSE",85:"CADENA",87:"MAYOR",88:"MENOR",89:"MAYOR_IGUAL",90:"MENOR_IGUAL",91:"IGUALDAD",92:"DISTINTO",93:"AND",94:"OR",95:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,5],[6,1],[12,2],[12,1],[14,1],[14,1],[15,8],[15,7],[15,2],[15,2],[15,2],[15,2],[15,2],[24,3],[24,7],[19,3],[19,3],[19,3],[19,3],[19,3],[19,0],[32,4],[32,4],[32,4],[32,4],[32,4],[32,0],[31,2],[31,1],[34,1],[34,4],[34,5],[34,8],[34,7],[34,9],[34,8],[34,11],[34,9],[34,9],[34,3],[34,2],[43,2],[43,1],[57,1],[57,4],[57,5],[57,8],[57,7],[57,9],[57,8],[57,11],[57,9],[57,9],[57,2],[57,2],[57,3],[57,1],[46,2],[46,1],[60,4],[47,3],[47,0],[21,2],[21,1],[64,1],[64,4],[64,5],[64,8],[64,7],[64,9],[64,8],[64,11],[64,9],[64,9],[64,2],[64,1],[65,2],[65,1],[68,1],[68,4],[68,5],[68,8],[68,7],[68,9],[68,8],[68,11],[68,9],[68,9],[68,2],[68,2],[68,2],[68,1],[66,2],[66,1],[69,4],[67,3],[67,0],[38,2],[38,0],[70,3],[70,0],[49,5],[49,5],[49,4],[50,1],[50,1],[50,2],[41,2],[41,0],[74,8],[74,3],[35,4],[35,4],[35,4],[35,4],[35,4],[29,2],[75,3],[75,0],[30,2],[30,0],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,1],[37,1],[37,1],[37,4],[37,1],[37,1],[37,1],[37,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[40,3],[40,3],[40,2],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 7: case 32: case 46: case 62: case 67: case 81: case 97:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 8: case 33: case 47: case 63: case 68: case 82: case 98:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]);
break;
case 5:
this.$=instruccionesAPI.nuevaClase($$[$0-3], $$[$0-1]);
break;
case 6: case 45: case 61: case 80: case 96:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);	salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 9: case 10: case 34: case 48: case 69: case 83: case 124:
 this.$ = $$[$0]; 
break;
case 11:
  this.$ = instruccionesAPI.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12:
this.$ = instruccionesAPI.nuevoMain($$[$0-1]);
break;
case 13: case 14: case 15: case 16: case 17:
 this.$ = instruccionesAPI.nuevaDeclaracionVariable($$[$0-1], $$[$0]);
break;
case 18:
 this.$ = instruccionesAPI.nuevaVariable($$[$0-2], $$[$0-1]);
break;
case 19:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 20: case 21: case 22: case 23: case 24: case 26: case 27: case 28: case 29: case 30:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-2], $$[$0-1], $$[$0]);
break;
case 25:
 this.$ = "NA"; 
break;
case 31:
 this.$ = "NM"; 
break;
case 35: case 49: case 70: case 84: case 108:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 36: case 50: case 71: case 85:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 37: case 51: case 72: case 86:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 38: case 52: case 73: case 87:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 39: case 53: case 74: case 88:
this.$ = instruccionesAPI.nuevoDoWhile($$[$0-6], $$[$0-2]);
break;
case 40: case 54: case 75: case 89:
this.$ = instruccionesAPI.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1]);
break;
case 41: case 55: case 76: case 90:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 42: case 43: case 56: case 57: case 77: case 78: case 91: case 92:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 44: case 60:
this.$=instruccionesAPI.nuevoReturnFuncion($$[$0-1]);
break;
case 58: case 59: case 79: case 93: case 94: case 95:
this.$=$$[$0-1];
break;
case 64: case 99:
this.$ = instruccionesAPI.nuevoCase($$[$0-2], $$[$0]);
break;
case 65: case 100:
this.$ = instruccionesAPI.nuevoDefault($$[$0]);
break;
case 66: case 101:
this.$ ="NO DEFAULT CLAUSE"
break;
case 102: case 104:
this.$ = instruccionesAPI.nuevoArgumento($$[$0-1], $$[$0]);
break;
case 103:
this.$ = "NA";
break;
case 105:
this.$ =  "NM";
break;
case 106: case 107:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 109: case 110: case 111:
this.$=$$[$0];
break;
case 112:
 this.$ = $$[$0];
break;
case 113:
 this.$ = "No Else Clause"; 
break;
case 114:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2], $$[$0]);
break;
case 115:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 116: case 117: case 118: case 119: case 120:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 121:
 this.$ = instruccionesAPI.nuevaListaid($$[$0-1], $$[$0]);
break;
case 122:
this.$ = instruccionesAPI.nuevaListaid($$[$0-1], $$[$0]);
break;
case 123:
this.$="NM";
break;
case 125:
 this.$ = "sin inicializar"; 
break;
case 126:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 127:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 128:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 129:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 130:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 131:
 this.$ = $$[$0-1]; 
break;
case 132: case 133:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 134:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 135:
 this.$ = instruccionesAPI.nuevaLlamada($$[$0-3], $$[$0-1]); 
break;
case 136:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 137:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 138:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 139:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 140:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 141:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 142:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 143:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 144:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 145:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 146:
this.$ = $$[$0]
break;
case 147:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 148:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 149:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 150:
 this.$ = instruccionesAPI.nuevaCondicion($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,10:$V2},{1:[3]},{2:$V0,5:[1,7],6:8,7:$V1,10:$V2},o($V3,[2,3]),{8:[1,9]},{8:[1,10]},o($V3,[2,6]),{1:[2,1]},o($V3,[2,2]),{9:[1,11]},{11:[1,12]},o($V3,[2,4]),{12:13,14:14,15:15,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{13:[1,23],14:24,15:15,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{8:[1,25],22:[1,26]},{8:$Vc,24:27,29:28},{8:$Vc,24:30,29:28},{8:$Vc,24:31,29:28},{8:$Vc,24:32,29:28},{8:$Vc,24:33,29:28},o($V3,[2,5]),o($Vb,[2,7]),{18:[1,34]},{18:[1,35]},o($Vb,[2,13]),{9:$Vd,30:36,36:$Ve},o($Vf,$Vg,{75:39,18:[1,38],33:$Vh}),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),{19:41,20:$Vi,23:$Vj,25:$Vk,26:$Vl,27:$Vm,28:$Vn},{20:[1,47]},{9:[1,48]},{8:$Vo,18:$Vp,37:49,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{19:59,20:$Vi,23:$Vj,25:$Vk,26:$Vl,27:$Vm,28:$Vn},o($Vf,[2,121]),{8:[1,60]},{20:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{11:[1,67]},o($Vb,[2,18]),{9:[2,124],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,37:72,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:73,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VB,[2,132]),o($VB,[2,133]),o($VB,[2,134],{18:[1,74]}),o($VB,[2,136]),o($VB,[2,137]),o($VB,[2,138]),o($VB,[2,139]),{20:[1,75]},o($Vf,$Vg,{75:76,33:$Vh}),{11:[1,77]},{20:$VC,32:78,33:$VD},{20:$VC,32:80,33:$VD},{20:$VC,32:81,33:$VD},{20:$VC,32:82,33:$VD},{20:$VC,32:83,33:$VD},{2:$VE,8:$VF,21:84,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:85},{8:$Vo,18:$Vp,37:101,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:102,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:103,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:104,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VB,[2,126]),{20:[1,105],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,20:$VS,37:107,38:106,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{11:[1,108]},o($Vf,[2,122]),{2:$VE,8:$VF,21:109,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:85},{20:[2,20]},{23:[1,110],25:[1,111],26:[1,112],27:[1,113],28:[1,114]},{20:[2,21]},{20:[2,22]},{20:[2,23]},{20:[2,24]},{2:$VE,8:$VF,13:[1,115],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:116},o($VT,[2,68]),o($VT,[2,69]),{18:[1,118],36:[1,117]},{18:[1,119]},{18:[1,120]},{11:[1,121]},{18:[1,122]},{18:[1,123]},{52:[1,124]},{9:[1,125]},o($VT,[2,80]),{8:$VU,29:126},{8:$VU,29:128},{8:$VU,29:129},{8:$VU,29:130},{8:$VU,29:131},o($VV,[2,127],{78:$Vz,79:$VA}),o($VV,[2,128],{78:$Vz,79:$VA}),o($VB,[2,129]),o($VB,[2,130]),o($VB,[2,131]),{20:[1,132]},{20:$VW,33:$VX,70:133,76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VY,8:$VZ,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,31:135,34:136,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},{2:$VE,8:$VF,13:[1,147],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:116},{8:[1,148]},{8:[1,149]},{8:[1,150]},{8:[1,151]},{8:[1,152]},o($Vb,[2,12]),o($VT,[2,67]),{8:$Vo,18:$Vp,37:153,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,20:$VS,37:107,38:154,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:158,40:155,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{8:$Vo,18:$Vp,37:158,40:159,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:160,68:161},{8:$Vo,18:$Vp,37:174,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vh1,23:$Vi1,25:$Vj1,49:175},{53:[1,179]},o($VT,[2,79]),{9:$Vd,30:180,36:$Ve},o($Vf,$Vg,{75:39,33:$Vh}),{9:$Vd,30:181,36:$Ve},{9:$Vd,30:182,36:$Ve},{9:$Vd,30:183,36:$Ve},{9:$Vd,30:184,36:$Ve},o($VB,[2,135]),{20:[2,102]},{8:$Vo,18:$Vp,37:185,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{2:$VY,8:$VZ,13:[1,186],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,34:187,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},o($VT,[2,33]),o($VT,[2,34]),{18:[1,189],36:[1,188]},{18:[1,190]},{18:[1,191]},{11:[1,192]},{18:[1,193]},{18:[1,194]},{52:[1,195]},{8:$Vo,18:$Vp,37:158,40:196,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{9:[1,197]},o($Vb,[2,11]),{20:$VC,32:198,33:$VD},{20:$VC,32:199,33:$VD},{20:$VC,32:200,33:$VD},{20:$VC,32:201,33:$VD},{20:$VC,32:202,33:$VD},{9:[1,203],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,204]},{20:[1,205]},o($Vk1,[2,150],{93:[1,206],94:[1,207]}),{8:$Vo,18:$Vp,37:158,40:208,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},o($Vl1,[2,146],{76:$Vx,77:$Vy,78:$Vz,79:$VA,87:[1,209],88:[1,210],89:[1,211],90:[1,212],91:[1,213],92:[1,214]}),{20:[1,215]},{2:$V61,8:$V71,13:[1,216],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},o($Vm1,[2,82]),o($Vm1,[2,83]),{18:[1,219],36:[1,218]},{18:[1,220]},{18:[1,221]},{11:[1,222]},{18:[1,223]},{18:[1,224]},{52:[1,225]},{9:[1,226]},{9:[1,227]},{9:[1,228]},o($Vm1,[2,96]),{20:[1,229],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,37:158,40:230,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{8:[1,231]},{8:[1,232]},{36:[1,233]},{52:[1,234]},{9:[1,235]},{9:[1,236]},{9:[1,237]},{9:[1,238]},{9:[1,239]},{20:$VW,33:$VX,70:240,76:$Vx,77:$Vy,78:$Vz,79:$VA},o($Vb,[2,19]),o($VT,[2,32]),{8:$Vo,18:$Vp,37:241,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,20:$VS,37:107,38:242,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:158,40:243,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{8:$Vo,18:$Vp,37:158,40:244,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:245,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{8:$Vo,18:$Vp,37:259,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vh1,23:$Vi1,25:$Vj1,49:260},{53:[1,261]},{9:[1,262]},o($VT,[2,45]),{20:[2,26]},{20:[2,27]},{20:[2,28]},{20:[2,29]},{20:[2,30]},o($VT,[2,70]),{9:[1,263]},{11:[1,264]},{8:$Vo,18:$Vp,37:158,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:265},{8:$Vo,18:$Vp,37:158,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:266},o($Vk1,[2,149]),{8:$Vo,18:$Vp,37:267,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:268,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:269,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:270,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:271,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:272,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{11:[1,273]},{42:[1,274]},o($Vm1,[2,81]),{8:$Vo,18:$Vp,37:275,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,20:$VS,37:107,38:276,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:158,40:277,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{8:$Vo,18:$Vp,37:158,40:278,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:279,68:161},{8:$Vo,18:$Vp,37:280,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vh1,23:$Vi1,25:$Vj1,49:281},{53:[1,282]},o($Vm1,[2,93]),o($Vm1,[2,94]),o($Vm1,[2,95]),{11:[1,283]},{9:[1,284]},{36:[1,285]},{36:[1,286]},{8:$Vo,18:$Vp,37:287,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{54:[1,288],55:[1,289]},o($Vm1,[2,116]),o($Vm1,[2,117]),o($Vm1,[2,118]),o($Vm1,[2,119]),o($Vm1,[2,120]),{20:[2,104]},{9:[1,290],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,291]},{20:[1,292]},{20:[1,293]},{2:$Vn1,8:$Vo1,13:[1,294],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},o($Vm1,[2,47]),o($Vm1,[2,48]),{18:[1,297],36:[1,296]},{18:[1,298]},{18:[1,299]},{11:[1,300]},{18:[1,301]},{18:[1,302]},{52:[1,303]},{9:[1,304]},{9:[1,305]},{8:$Vo,18:$Vp,37:158,40:306,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},o($Vm1,[2,61]),{20:[1,307],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,37:158,40:308,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{52:[1,309]},o($VT,[2,44]),o($VT,[2,71]),{2:$VE,8:$VF,21:310,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:85},o($Vk1,[2,147]),o($Vk1,[2,148]),o($Vl1,[2,140],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($Vl1,[2,141],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($Vl1,[2,142],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($Vl1,[2,143],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($Vl1,[2,144],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),o($Vl1,[2,145],{76:$Vx,77:$Vy,78:$Vz,79:$VA}),{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:311,68:161},{18:[1,312]},{9:[1,313],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,314]},{20:[1,315]},{20:[1,316]},{2:$V61,8:$V71,13:[1,317],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},{20:[1,318],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,37:158,40:319,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{52:[1,320]},{61:$Vy1,66:321,69:322},{8:[1,324]},{8:$Vo,18:$Vp,37:325,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:326,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{9:[1,327],76:$Vx,77:$Vy,78:$Vz,79:$VA},{18:[1,328]},{18:[1,329]},o($VT,[2,35]),{9:[1,330]},{11:[1,331]},{11:[1,332]},{42:[1,333]},o($Vm1,[2,46]),{8:$Vo,18:$Vp,37:334,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,20:$VS,37:107,38:335,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:158,40:336,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{8:$Vo,18:$Vp,37:158,40:337,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:338,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{8:$Vo,18:$Vp,37:339,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vh1,23:$Vi1,25:$Vj1,49:340},{53:[1,341]},o($Vm1,[2,58]),o($Vm1,[2,59]),{9:[1,342]},{11:[1,343]},{9:[1,344]},{54:[1,345],55:[1,346]},{2:$VE,8:$VF,13:[1,347],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:86,39:$VL,42:$VM,44:$VN,45:$VO,48:$VP,51:$VQ,56:$VR,64:116},{2:$V61,8:$V71,13:[1,348],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},{8:$Vo,18:$Vp,37:158,40:349,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},o($Vm1,[2,84]),{9:[1,350]},{11:[1,351]},{11:[1,352]},{42:[1,353]},{11:[1,354]},{9:[1,355]},{54:[1,356],55:[1,357]},{13:$Vz1,61:$Vy1,63:$VA1,67:358,69:359},o($VB1,[2,98]),{8:$Vo,18:$Vp,37:361,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{36:$VC1,50:362,71:$VD1,72:$VE1},{9:[1,366],76:$Vx,77:$Vy,78:$Vz,79:$VA},{9:[1,367],76:$Vx,77:$Vy,78:$Vz,79:$VA},o($VF1,[2,108]),{8:$Vo,18:$Vp,37:368,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:369,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VT,[2,36]),{2:$VY,8:$VZ,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,31:370,34:136,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:371,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{18:[1,372]},{9:[1,373],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,374]},{20:[1,375]},{20:[1,376]},{2:$Vn1,8:$Vo1,13:[1,377],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{20:[1,378],76:$Vx,77:$Vy,78:$Vz,79:$VA},{8:$Vo,18:$Vp,37:158,40:379,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{52:[1,380]},o($Vm1,[2,60]),{46:381,60:382,61:$VG1},{8:[1,384]},{18:[1,385]},{18:[1,386]},o($VT,$VH1,{41:387,73:$VI1}),o($VT,[2,73]),{20:[1,389]},o($Vm1,[2,85]),{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:390,68:161},{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:391,68:161},{18:[1,392]},{61:$Vy1,66:393,69:322},{8:[1,394]},{18:[1,395]},{18:[1,396]},{13:[1,397]},o($VB1,[2,97]),{62:[1,398]},{62:[1,399],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,400]},{20:[2,109]},{20:[2,110]},{8:$Vo,18:$Vp,37:401,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VF1,[2,106]),o($VF1,[2,107]),{20:[1,402],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,403],76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$VY,8:$VZ,13:[1,404],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,34:187,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},{2:$Vn1,8:$Vo1,13:[1,405],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{8:$Vo,18:$Vp,37:158,40:406,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},o($Vm1,[2,49]),{9:[1,407]},{11:[1,408]},{11:[1,409]},{42:[1,410]},{11:[1,411]},{9:[1,412]},{54:[1,413],55:[1,414]},{13:$VJ1,47:415,60:416,61:$VG1,63:$VK1},o($VB1,[2,63]),{8:$Vo,18:$Vp,37:418,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{36:$VC1,50:419,71:$VD1,72:$VE1},{8:$Vo,18:$Vp,37:420,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:421,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VT,[2,72]),{11:[1,424],39:[1,423],74:422},{9:[1,425]},{2:$V61,8:$V71,13:[1,426],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},{2:$V61,8:$V71,13:[1,427],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},{8:$Vo,18:$Vp,37:158,40:428,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{13:$Vz1,61:$Vy1,63:$VA1,67:429,69:359},{36:$VC1,50:430,71:$VD1,72:$VE1},{8:$Vo,18:$Vp,37:431,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:432,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VT,[2,75]),{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:433,68:161},{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:434,68:161},{11:[1,435]},{20:[2,111],76:$Vx,77:$Vy,78:$Vz,79:$VA},{9:[1,436]},{9:[1,437]},o($VT,$VH1,{41:438,73:$VI1}),o($VT,[2,38]),{20:[1,439]},o($Vm1,[2,50]),{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:440,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:441,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{18:[1,442]},{46:443,60:382,61:$VG1},{8:[1,444]},{18:[1,445]},{18:[1,446]},{13:[1,447]},o($VB1,[2,62]),{62:[1,448]},{62:[1,449],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,450]},{20:[1,451],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,452],76:$Vx,77:$Vy,78:$Vz,79:$VA},o($Vm1,[2,112]),{18:[1,453]},{2:$VY,8:$VZ,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,31:454,34:136,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},o($VT,[2,74]),o($Vm1,$VH1,{41:455,73:$VI1}),o($Vm1,[2,87]),{20:[1,456]},{13:[1,457]},{20:[1,458]},{20:[1,459],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,460],76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$V61,8:$V71,13:[2,100],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},o($VB1,[2,99],{35:162,68:217,2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1}),{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:461,68:161},o($VT,[2,77]),o($VT,[2,78]),o($VT,[2,37]),{9:[1,462]},{2:$Vn1,8:$Vo1,13:[1,463],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{2:$Vn1,8:$Vo1,13:[1,464],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{8:$Vo,18:$Vp,37:158,40:465,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{13:$VJ1,47:466,60:416,61:$VG1,63:$VK1},{36:$VC1,50:467,71:$VD1,72:$VE1},{8:$Vo,18:$Vp,37:468,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},{8:$Vo,18:$Vp,37:469,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw},o($VT,[2,40]),{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:470,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:471,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},{11:[1,472]},{9:[1,473]},{9:[1,474]},{8:$Vo,18:$Vp,37:158,40:475,76:$Vq,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:156,95:$V51},{2:$VY,8:$VZ,13:[1,476],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,34:187,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},o($Vm1,[2,86]),{9:[1,477]},o($Vm1,[2,89]),{11:[1,478]},{9:[1,479]},{9:[1,480]},{2:$V61,8:$V71,13:[1,481],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},o($VT,[2,39]),o($Vm1,$VH1,{41:482,73:$VI1}),o($Vm1,[2,52]),{20:[1,483]},{13:[1,484]},{20:[1,485]},{20:[1,486],76:$Vx,77:$Vy,78:$Vz,79:$VA},{20:[1,487],76:$Vx,77:$Vy,78:$Vz,79:$VA},{2:$Vn1,8:$Vo1,13:[2,65],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},o($VB1,[2,64],{35:247,57:295,2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,58:$Vw1,59:$Vx1}),{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:488,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},o($VT,[2,42]),o($VT,[2,43]),{20:[1,489]},o($Vm1,[2,115]),o($Vm1,[2,88]),{2:$V61,8:$V71,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,65:490,68:161},o($Vm1,[2,91]),o($Vm1,[2,92]),o($VT,[2,76]),o($Vm1,[2,51]),{9:[1,491]},o($Vm1,[2,54]),{11:[1,492]},{9:[1,493]},{9:[1,494]},{2:$Vn1,8:$Vo1,13:[1,495],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{11:[1,496]},{2:$V61,8:$V71,13:[1,497],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:162,39:$V81,42:$V91,44:$Va1,45:$Vb1,48:$Vc1,51:$Vd1,56:$Ve1,58:$Vf1,59:$Vg1,68:217},o($Vm1,[2,53]),{2:$Vn1,8:$Vo1,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,43:498,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:246,58:$Vw1,59:$Vx1},o($Vm1,[2,56]),o($Vm1,[2,57]),o($VT,[2,41]),{2:$VY,8:$VZ,23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,31:499,34:136,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},o($Vm1,[2,90]),{2:$Vn1,8:$Vo1,13:[1,500],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,35:247,39:$Vp1,42:$Vq1,44:$Vr1,45:$Vs1,48:$Vt1,51:$Vu1,56:$Vv1,57:295,58:$Vw1,59:$Vx1},{2:$VY,8:$VZ,13:[1,501],23:$VG,25:$VH,26:$VI,27:$VJ,28:$VK,34:187,35:137,39:$V_,42:$V$,44:$V01,45:$V11,48:$V21,51:$V31,56:$V41},o($Vm1,[2,55]),o($Vm1,$VH1,{41:502,73:$VI1}),o($Vm1,[2,114])],
defaultActions: {7:[2,1],78:[2,20],80:[2,21],81:[2,22],82:[2,23],83:[2,24],133:[2,102],198:[2,26],199:[2,27],200:[2,28],201:[2,29],202:[2,30],240:[2,104],363:[2,109],364:[2,110]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	var salida=[];
	var AllowBreak = 0;
	var valueToReturn=false;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 25;
break;
case 2:return 27;
break;
case 3:return 28;
break;
case 4:return 26;
break;
case 5:return 84;
break;
case 6:return 83;
break;
case 7:return 10;
break;
case 8:return 7;
break;
case 9:return 39;
break;
case 10:return 73;
break;
case 11:return 45;
break;
case 12:return 61;
break;
case 13:return 63;
break;
case 14:return 58;
break;
case 15:return 59;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 48;
break;
case 19:return 17;
break;
case 20:return 56;
break;
case 21:return 22;
break;
case 22:return 51;
break;
case 23:return 53;
break;
case 24:return 54;
break;
case 25:return 55;
break;
case 26: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 85;
break;
case 27: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 82;
break;
case 28:return 81;
break;
case 29:return 80;
break;
case 30:return 8;
break;
case 31:
break;
case 32:// comentario simple línea
break;
case 33:// comentario multiple líneas
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return "MAS";
break;
case 37:return 76;
break;
case 38:return 78;
break;
case 39:return 79;
break;
case 40:return 'POTENCIA';
break;
case 41:return 'MODULO';
break;
case 42:return 91;
break;
case 43:return 92;
break;
case 44:return 36;
break;
case 45:return 89;
break;
case 46:return 87;
break;
case 47:return 90;
break;
case 48:return 88;
break;
case 49:return 93;
break;
case 50:return 94;
break;
case 51:return 95;
break;
case 52:return 11;
break;
case 53:return 13;
break;
case 54:return 18;
break;
case 55:return 20;
break;
case 56:return 'ABRIR_CORCHETE';
break;
case 57:return 'CERRAR_CORCHETE';
break;
case 58:return 9;
break;
case 59:return 62;
break;
case 60:return 52;
break;
case 61:return 33;
break;
case 62:return 5;
break;
case 63: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); salida.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:"([^\"]|\\n|\\t|\\r|\\\\|\\")*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}