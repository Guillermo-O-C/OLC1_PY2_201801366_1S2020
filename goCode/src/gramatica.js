/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,7,10],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[13,16,17,23,25,26,27,28],$Vc=[1,30],$Vd=[2,73],$Ve=[1,38],$Vf=[9,35],$Vg=[2,71],$Vh=[1,41],$Vi=[2,25],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,55],$Vp=[1,52],$Vq=[1,51],$Vr=[1,53],$Vs=[1,54],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,70],$Vy=[1,69],$Vz=[1,71],$VA=[1,72],$VB=[9,20,32,60,65,66,67,68,76,77,78,79,80,81,82,83],$VC=[2,31],$VD=[1,79],$VE=[1,87],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[8,13,23,25,26,27,28,38,41,42,45,48,53,54,59,61],$VS=[1,124],$VT=[9,20,32,60,65,66,76,77,78,79,80,81,82,83],$VU=[1,141],$VV=[2,48],$VW=[1,164],$VX=[9,20],$VY=[9,20,82,83],$VZ=[1,211],$V_=[13,59,61],$V$=[8,18,65,69,70,71,72,73,74,84],$V01=[2,61],$V11=[1,233];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"R_IMPORT":7,"IDENTIFICADOR":8,"PUNTO_COMA":9,"R_CLASS":10,"ABRIR_LLAVE":11,"classBody":12,"CERRAR_LLAVE":13,"classActions":14,"declaracion":15,"asignacion":16,"R_VOID":17,"ABRIR_PARENTESIS":18,"parametros":19,"CERRAR_PARENTESIS":20,"sentencias":21,"R_MAIN":22,"R_INTEGER":23,"declaracion_p":24,"R_DOUBLE":25,"R_STRING":26,"R_BOOLEAN":27,"R_CHAR":28,"listaID":29,"defincion_var":30,"parametros_p":31,"COMA":32,"sentencia":33,"declaracion_var":34,"IGUAL":35,"expresion":36,"argumentos":37,"R_IF":38,"condicion":39,"elseIf":40,"R_WHILE":41,"R_SWITCH":42,"casos":43,"default":44,"R_FOR":45,"for_init":46,"for_change":47,"R_SYSTEM":48,"PUNTO":49,"R_OUT":50,"R_PRINT":51,"R_PRINTLN":52,"R_BREAK":53,"R_CONTINUE":54,"argumentos_P":55,"INCREMENTO":56,"DECREMENTO":57,"caso":58,"R_CASE":59,"DOS_PUNTOS":60,"R_DEFAULT":61,"R_ELSE":62,"elseIf_P":63,"listaID_P":64,"MENOS":65,"MAS":66,"MULTIPLICACION":67,"DIVISION":68,"ENTERO":69,"DECIMAL":70,"CARACTER":71,"R_TRUE":72,"R_FALSE":73,"CADENA":74,"expresion_relacional":75,"MAYOR":76,"MENOR":77,"MAYOR_IGUAL":78,"MENOR_IGUAL":79,"IGUALDAD":80,"DISTINTO":81,"AND":82,"OR":83,"NOT":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"R_IMPORT",8:"IDENTIFICADOR",9:"PUNTO_COMA",10:"R_CLASS",11:"ABRIR_LLAVE",13:"CERRAR_LLAVE",16:"asignacion",17:"R_VOID",18:"ABRIR_PARENTESIS",20:"CERRAR_PARENTESIS",22:"R_MAIN",23:"R_INTEGER",25:"R_DOUBLE",26:"R_STRING",27:"R_BOOLEAN",28:"R_CHAR",32:"COMA",35:"IGUAL",38:"R_IF",41:"R_WHILE",42:"R_SWITCH",45:"R_FOR",48:"R_SYSTEM",49:"PUNTO",50:"R_OUT",51:"R_PRINT",52:"R_PRINTLN",53:"R_BREAK",54:"R_CONTINUE",56:"INCREMENTO",57:"DECREMENTO",59:"R_CASE",60:"DOS_PUNTOS",61:"R_DEFAULT",62:"R_ELSE",65:"MENOS",66:"MAS",67:"MULTIPLICACION",68:"DIVISION",69:"ENTERO",70:"DECIMAL",71:"CARACTER",72:"R_TRUE",73:"R_FALSE",74:"CADENA",76:"MAYOR",77:"MENOR",78:"MAYOR_IGUAL",79:"MENOR_IGUAL",80:"IGUALDAD",81:"DISTINTO",82:"AND",83:"OR",84:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,5],[6,2],[12,2],[12,1],[14,1],[14,1],[15,8],[15,7],[15,2],[15,2],[15,2],[15,2],[15,2],[24,3],[24,7],[19,3],[19,3],[19,3],[19,3],[19,3],[19,0],[31,4],[31,4],[31,4],[31,4],[31,4],[31,0],[21,2],[21,1],[33,1],[33,4],[33,5],[33,8],[33,7],[33,8],[33,11],[33,9],[33,9],[33,2],[33,2],[37,2],[37,0],[55,3],[55,0],[46,5],[46,5],[46,4],[47,1],[47,1],[47,2],[43,2],[43,1],[58,4],[44,3],[44,0],[40,2],[40,0],[63,8],[63,3],[34,4],[34,4],[34,4],[34,4],[34,4],[29,2],[64,3],[64,0],[30,2],[30,0],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,1],[39,3],[39,3],[39,2],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 7: case 32: case 55:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 8: case 33: case 56:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]);
break;
case 5:
this.$=instruccionesAPI.nuevaClase($$[$0-3], $$[$0-1]);
break;
case 6:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
	   			salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 9: case 10: case 34: case 72:
 this.$ = $$[$0]; 
break;
case 11:
  this.$ = instruccionesAPI.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 12:
this.$ = instruccionesAPI.nuevoMain($$[$0-1]);
break;
case 13: case 14: case 15: case 16: case 17:
 this.$ = instruccionesAPI.nuevaDeclaracionVariable($$[$0-1], $$[$0]);
break;
case 18:
 this.$ = instruccionesAPI.nuevaVariable($$[$0-2], $$[$0-1]);
break;
case 19:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 20: case 21: case 22: case 23: case 24: case 26: case 27: case 28: case 29: case 30:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-2], $$[$0-1], $$[$0]);
break;
case 25:
 this.$ = "NA"; 
break;
case 31:
 this.$ = "NM"; 
break;
case 35: case 51:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 36:
this.$ = instruccionesAPI.nuevaLlamada($$[$0-4], $$[$0-2]);
break;
case 37:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2]);
break;
case 38:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 39:
this.$ = instruccionesAPI.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1]);
break;
case 40:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 41: case 42:
this.$ = instruccionesAPI.nuevoImprimir($$[$0-2]);
break;
case 43: case 44:
this.$=$$[$0-1];
break;
case 45: case 47:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 46:
this.$ = "NA";
break;
case 48:
this.$ =  "NM";
break;
case 49: case 50:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 52: case 53: case 54:
this.$=$$[$0];
break;
case 57:
this.$ = instruccionesAPI.nuevoCase($$[$0-2], $$[$0]);
break;
case 58:
this.$ = instruccionesAPI.nuevoDefault($$[$0]);
break;
case 59:
this.$ ="NO DEFAULT CLAUSE"
break;
case 60:
 this.$ = $$[$0];
break;
case 61:
 this.$ = "No Else Clause"; 
break;
case 62:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2]);
break;
case 63:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 64: case 65: case 66: case 67: case 68:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 69:
 this.$ = instruccionesAPI.nuevaListaid($$[$0-1], $$[$0]);
break;
case 70:
this.$ = instruccionesAPI.nuevaListaid($$[$0-1], $$[$0]);
break;
case 71:
this.$="NM";
break;
case 73:
 this.$ = "sin inicializar"; 
break;
case 74:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 75:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 76:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 77:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 78:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 79:
 this.$ = $$[$0-1]; 
break;
case 80: case 81:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 82:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 83:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 84:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 87:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 88:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 89:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 90:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 91:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 92:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 93:
this.$ = $$[$0]
break;
case 94:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 95:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 96:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 97:
 this.$ = instruccionesAPI.nuevaCondicion($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,10:$V2},{1:[3]},{2:$V0,5:[1,7],6:8,7:$V1,10:$V2},o($V3,[2,3]),{8:[1,9]},{8:[1,10]},{9:[1,11]},{1:[2,1]},o($V3,[2,2]),{9:[1,12]},{11:[1,13]},o($V3,[2,6]),o($V3,[2,4]),{12:14,14:15,15:16,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{13:[1,24],14:25,15:16,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{8:[1,26],22:[1,27]},{8:$Vc,24:28,29:29},{8:$Vc,24:31,29:29},{8:$Vc,24:32,29:29},{8:$Vc,24:33,29:29},{8:$Vc,24:34,29:29},o($V3,[2,5]),o($Vb,[2,7]),{18:[1,35]},{18:[1,36]},o($Vb,[2,13]),{9:$Vd,30:37,35:$Ve},o($Vf,$Vg,{64:40,18:[1,39],32:$Vh}),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),{19:42,20:$Vi,23:$Vj,25:$Vk,26:$Vl,27:$Vm,28:$Vn},{20:[1,48]},{9:[1,49]},{8:$Vo,18:$Vp,36:50,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{19:60,20:$Vi,23:$Vj,25:$Vk,26:$Vl,27:$Vm,28:$Vn},o($Vf,[2,69]),{8:[1,61]},{20:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{11:[1,68]},o($Vb,[2,18]),{9:[2,72],65:$Vx,66:$Vy,67:$Vz,68:$VA},{8:$Vo,18:$Vp,36:73,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:74,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},o($VB,[2,80]),o($VB,[2,81]),o($VB,[2,82]),o($VB,[2,83]),o($VB,[2,84]),o($VB,[2,85]),o($VB,[2,86]),{20:[1,75]},o($Vf,$Vg,{64:76,32:$Vh}),{11:[1,77]},{20:$VC,31:78,32:$VD},{20:$VC,31:80,32:$VD},{20:$VC,31:81,32:$VD},{20:$VC,31:82,32:$VD},{20:$VC,31:83,32:$VD},{8:$VE,21:84,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$Vo,18:$Vp,36:100,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:101,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:102,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:103,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},o($VB,[2,74]),{20:[1,104],65:$Vx,66:$Vy,67:$Vz,68:$VA},{11:[1,105]},o($Vf,[2,70]),{8:$VE,21:106,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{20:[2,20]},{23:[1,107],25:[1,108],26:[1,109],27:[1,110],28:[1,111]},{20:[2,21]},{20:[2,22]},{20:[2,23]},{20:[2,24]},{8:$VE,13:[1,112],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($VR,[2,33]),o($VR,[2,34]),{18:[1,115],35:[1,114]},{18:[1,116]},{18:[1,117]},{18:[1,118]},{18:[1,119]},{49:[1,120]},{9:[1,121]},{9:[1,122]},{8:$VS,29:123},{8:$VS,29:125},{8:$VS,29:126},{8:$VS,29:127},{8:$VS,29:128},o($VT,[2,75],{67:$Vz,68:$VA}),o($VT,[2,76],{67:$Vz,68:$VA}),o($VB,[2,77]),o($VB,[2,78]),o($VB,[2,79]),{8:$VE,21:129,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,13:[1,130],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:[1,131]},{8:[1,132]},{8:[1,133]},{8:[1,134]},{8:[1,135]},o($Vb,[2,12]),o($VR,[2,32]),{8:$Vo,18:$Vp,36:136,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,20:[2,46],36:138,37:137,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:142,39:139,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:140,84:$VU},{8:$Vo,18:$Vp,36:142,39:143,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:140,84:$VU},{8:$Vo,18:$Vp,36:144,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:[1,148],23:[1,146],25:[1,147],46:145},{50:[1,149]},o($VR,[2,43]),o($VR,[2,44]),{9:$Vd,30:150,35:$Ve},o($Vf,$Vg,{64:40,32:$Vh}),{9:$Vd,30:151,35:$Ve},{9:$Vd,30:152,35:$Ve},{9:$Vd,30:153,35:$Ve},{9:$Vd,30:154,35:$Ve},{8:$VE,13:[1,155],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($Vb,[2,11]),{20:$VC,31:156,32:$VD},{20:$VC,31:157,32:$VD},{20:$VC,31:158,32:$VD},{20:$VC,31:159,32:$VD},{20:$VC,31:160,32:$VD},{9:[1,161],65:$Vx,66:$Vy,67:$Vz,68:$VA},{20:[1,162]},{20:$VV,32:$VW,55:163,65:$Vx,66:$Vy,67:$Vz,68:$VA},{20:[1,165]},o($VX,[2,97],{82:[1,166],83:[1,167]}),{8:$Vo,18:$Vp,36:142,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:168},o($VY,[2,93],{65:$Vx,66:$Vy,67:$Vz,68:$VA,76:[1,169],77:[1,170],78:[1,171],79:[1,172],80:[1,173],81:[1,174]}),{20:[1,175]},{20:[1,176],65:$Vx,66:$Vy,67:$Vz,68:$VA},{8:$Vo,18:$Vp,36:142,39:177,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:140,84:$VU},{8:[1,178]},{8:[1,179]},{35:[1,180]},{49:[1,181]},{9:[1,182]},{9:[1,183]},{9:[1,184]},{9:[1,185]},{9:[1,186]},o($Vb,[2,19]),{20:[2,26]},{20:[2,27]},{20:[2,28]},{20:[2,29]},{20:[2,30]},o($VR,[2,35]),{9:[1,187]},{20:[2,45]},{8:$Vo,18:$Vp,36:188,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{11:[1,189]},{8:$Vo,18:$Vp,36:142,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:190},{8:$Vo,18:$Vp,36:142,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:191},o($VX,[2,96]),{8:$Vo,18:$Vp,36:192,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:193,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:194,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:195,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:196,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:197,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{11:[1,198]},{11:[1,199]},{9:[1,200]},{35:[1,201]},{35:[1,202]},{8:$Vo,18:$Vp,36:203,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{51:[1,204],52:[1,205]},o($VR,[2,64]),o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),o($VR,[2,36]),{20:$VV,32:$VW,55:206,65:$Vx,66:$Vy,67:$Vz,68:$VA},{8:$VE,21:207,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($VX,[2,94]),o($VX,[2,95]),o($VY,[2,87],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VY,[2,88],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VY,[2,89],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VY,[2,90],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VY,[2,91],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),o($VY,[2,92],{65:$Vx,66:$Vy,67:$Vz,68:$VA}),{8:$VE,21:208,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{43:209,58:210,59:$VZ},{8:[1,212]},{8:$Vo,18:$Vp,36:213,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:214,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{9:[1,215],65:$Vx,66:$Vy,67:$Vz,68:$VA},{18:[1,216]},{18:[1,217]},{20:[2,47]},{8:$VE,13:[1,218],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,13:[1,219],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{13:[2,59],44:220,58:221,59:$VZ,61:[1,222]},o($V_,[2,56]),{8:$Vo,18:$Vp,36:223,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{35:[1,227],47:224,56:[1,225],57:[1,226]},{9:[1,228],65:$Vx,66:$Vy,67:$Vz,68:$VA},{9:[1,229],65:$Vx,66:$Vy,67:$Vz,68:$VA},o($V$,[2,51]),{8:$Vo,18:$Vp,36:230,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},{8:$Vo,18:$Vp,36:231,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},o($VR,$V01,{40:232,62:$V11}),o($VR,[2,38]),{13:[1,234]},o($V_,[2,55]),{60:[1,235]},{60:[1,236],65:$Vx,66:$Vy,67:$Vz,68:$VA},{20:[1,237]},{20:[2,52]},{20:[2,53]},{8:$Vo,18:$Vp,36:238,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw},o($V$,[2,49]),o($V$,[2,50]),{20:[1,239],65:$Vx,66:$Vy,67:$Vz,68:$VA},{20:[1,240],65:$Vx,66:$Vy,67:$Vz,68:$VA},o($VR,[2,37]),{11:[1,243],38:[1,242],63:241},o($VR,[2,39]),{8:$VE,21:244,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,21:245,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{11:[1,246]},{20:[2,54],65:$Vx,66:$Vy,67:$Vz,68:$VA},{9:[1,247]},{9:[1,248]},o($VR,[2,60]),{18:[1,249]},{8:$VE,21:250,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,13:[2,58],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($V_,[2,57],{34:86,33:113,8:$VE,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ}),{8:$VE,21:251,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($VR,[2,41]),o($VR,[2,42]),{8:$Vo,18:$Vp,36:142,39:252,65:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:140,84:$VU},{8:$VE,13:[1,253],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,13:[1,254],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{20:[1,255]},o($VR,[2,63]),o($VR,[2,40]),{11:[1,256]},{8:$VE,21:257,23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:85,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},{8:$VE,13:[1,258],23:$VF,25:$VG,26:$VH,27:$VI,28:$VJ,33:113,34:86,38:$VK,41:$VL,42:$VM,45:$VN,48:$VO,53:$VP,54:$VQ},o($VR,$V01,{40:259,62:$V11}),o($VR,[2,62])],
defaultActions: {7:[2,1],78:[2,20],80:[2,21],81:[2,22],82:[2,23],83:[2,24],156:[2,26],157:[2,27],158:[2,28],159:[2,29],160:[2,30],163:[2,45],206:[2,47],225:[2,52],226:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	var salida=[];
	var AllowBreak = 0;
	var valueToReturn=false;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 25;
break;
case 2:return 27;
break;
case 3:return 28;
break;
case 4:return 26;
break;
case 5:return 73;
break;
case 6:return 72;
break;
case 7:return 10;
break;
case 8:return 7;
break;
case 9:return 38;
break;
case 10:return 62;
break;
case 11:return 42;
break;
case 12:return 59;
break;
case 13:return 61;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 41;
break;
case 17:return 'R_DO';
break;
case 18:return 45;
break;
case 19:return 17;
break;
case 20:return 'R_RETURN';
break;
case 21:return 22;
break;
case 22:return 48;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 52;
break;
case 26: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 74;
break;
case 27: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 71;
break;
case 28:return 70;
break;
case 29:return 69;
break;
case 30:return 8;
break;
case 31:
break;
case 32:// comentario simple línea
break;
case 33:// comentario multiple líneas
break;
case 34:return 56;
break;
case 35:return 57;
break;
case 36:return "MAS";
break;
case 37:return 65;
break;
case 38:return 67;
break;
case 39:return 68;
break;
case 40:return 'POTENCIA';
break;
case 41:return 'MODULO';
break;
case 42:return 80;
break;
case 43:return 81;
break;
case 44:return 35;
break;
case 45:return 78;
break;
case 46:return 76;
break;
case 47:return 79;
break;
case 48:return 77;
break;
case 49:return 82;
break;
case 50:return 83;
break;
case 51:return 84;
break;
case 52:return 11;
break;
case 53:return 13;
break;
case 54:return 18;
break;
case 55:return 20;
break;
case 56:return 'ABRIR_CORCHETE';
break;
case 57:return 'CERRAR_CORCHETE';
break;
case 58:return 9;
break;
case 59:return 60;
break;
case 60:return 49;
break;
case 61:return 32;
break;
case 62:return 5;
break;
case 63: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:"([^\"]|\\n|\\t|\\r|\\\\|\\")*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}