/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,5],$V3=[2,5,7,10],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[13,16,17,23,25,26,27,28],$Vc=[2,62],$Vd=[1,38],$Ve=[1,39],$Vf=[2,26],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,58],$Vm=[1,55],$Vn=[1,54],$Vo=[1,56],$Vp=[1,57],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,71],$Vu=[1,70],$Vv=[1,72],$Vw=[1,73],$Vx=[9,20,50,54,55,56,57,64,65,66,67,68,69,70,71],$Vy=[2,32],$Vz=[1,78],$VA=[1,86],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[8,13,23,25,26,27,28,36,39,40,43,49,51],$VL=[9,20,50,54,55,64,65,66,67,68,69,70,71],$VM=[1,130],$VN=[9,20],$VO=[9,20,70,71],$VP=[1,190],$VQ=[13,49,51],$VR=[8,18,54,58,59,60,61,62,72],$VS=[2,53],$VT=[1,208];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"R_IMPORT":7,"IDENTIFICADOR":8,"PUNTO_COMA":9,"R_CLASS":10,"ABRIR_LLAVE":11,"classBody":12,"CERRAR_LLAVE":13,"classActions":14,"declaracion":15,"asignacion":16,"R_VOID":17,"ABRIR_PARENTESIS":18,"parametros":19,"CERRAR_PARENTESIS":20,"sentencias":21,"R_MAIN":22,"R_INTEGER":23,"declaracion_p":24,"R_DOUBLE":25,"R_STRING":26,"R_BOOLEAN":27,"R_CHAR":28,"defincion_var":29,"parametros_p":30,"COMA":31,"sentencia":32,"declaracion_var":33,"IGUAL":34,"expresion":35,"R_IF":36,"condicion":37,"elseIf":38,"R_WHILE":39,"R_SWITCH":40,"casos":41,"default":42,"R_FOR":43,"for_init":44,"for_change":45,"INCREMENTO":46,"DECREMENTO":47,"caso":48,"R_CASE":49,"DOS_PUNTOS":50,"R_DEFAULT":51,"R_ELSE":52,"elseIf_P":53,"MENOS":54,"MAS":55,"MULTIPLICACION":56,"DIVISION":57,"ENTERO":58,"DECIMAL":59,"CARACTER":60,"R_TRUE":61,"R_FALSE":62,"expresion_relacional":63,"MAYOR":64,"MENOR":65,"MAYOR_IGUAL":66,"MENOR_IGUAL":67,"IGUALDAD":68,"DISTINTO":69,"AND":70,"OR":71,"NOT":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"R_IMPORT",8:"IDENTIFICADOR",9:"PUNTO_COMA",10:"R_CLASS",11:"ABRIR_LLAVE",13:"CERRAR_LLAVE",16:"asignacion",17:"R_VOID",18:"ABRIR_PARENTESIS",20:"CERRAR_PARENTESIS",22:"R_MAIN",23:"R_INTEGER",25:"R_DOUBLE",26:"R_STRING",27:"R_BOOLEAN",28:"R_CHAR",31:"COMA",34:"IGUAL",36:"R_IF",39:"R_WHILE",40:"R_SWITCH",43:"R_FOR",46:"INCREMENTO",47:"DECREMENTO",49:"R_CASE",50:"DOS_PUNTOS",51:"R_DEFAULT",52:"R_ELSE",54:"MENOS",55:"MAS",56:"MULTIPLICACION",57:"DIVISION",58:"ENTERO",59:"DECIMAL",60:"CARACTER",61:"R_TRUE",62:"R_FALSE",64:"MAYOR",65:"MENOR",66:"MAYOR_IGUAL",67:"MENOR_IGUAL",68:"IGUALDAD",69:"DISTINTO",70:"AND",71:"OR",72:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,5],[6,2],[6,2],[12,2],[12,1],[14,1],[14,1],[15,8],[15,7],[15,3],[15,3],[15,3],[15,3],[15,3],[24,2],[24,6],[19,3],[19,3],[19,3],[19,3],[19,3],[19,0],[30,4],[30,4],[30,4],[30,4],[30,4],[30,0],[21,2],[21,1],[32,1],[32,4],[32,8],[32,7],[32,8],[32,11],[44,5],[44,5],[44,4],[45,1],[45,1],[45,2],[41,2],[41,1],[48,4],[42,3],[42,0],[38,2],[38,0],[53,8],[53,3],[33,4],[33,4],[33,4],[33,4],[33,4],[29,2],[29,0],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,1],[37,3],[37,3],[37,2],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuado se haya reconocido la entrada completa retornamos el AST
		var temporal = salida;
		salida=[];
		return {AST: $$[$0-1], Errores: temporal};
	
break;
case 2: case 8: case 33: case 47:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 9: case 34: case 48:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]);
break;
case 5:
this.$=instruccionesAPI.nuevaClase($$[$0-3], $$[$0-1]);
break;
case 6: case 7:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
	   			salida.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 10: case 11: case 35: case 61:
 this.$ = $$[$0]; 
break;
case 12:
this.$ = instruccionesAPI.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1]);
break;
case 13:
this.$ = instruccionesAPI.nuevoMain($$[$0-1]);
break;
case 14: case 15: case 16: case 17: case 18:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-2], $$[$0-1], $$[$0]);
break;
case 19:
 this.$ = instruccionesAPI.nuevaVariable($$[$0-1]);
break;
case 20:
this.$ = instruccionesAPI.nuevaFuncion($$[$0-4], $$[$0-1]);
break;
case 21: case 22: case 23: case 24: case 25: case 27: case 28: case 29: case 30: case 31:
 this.$ = instruccionesAPI.nuevoParametro($$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
 this.$ = "NA"; 
break;
case 32:
 this.$ = "NM"; 
break;
case 36: case 43:
this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3], $$[$0-1]);
break;
case 37:
 this.$ = instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2]);
break;
case 38:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-4], $$[$0-1]);
break;
case 39:
this.$ = instruccionesAPI.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1]);
break;
case 40:
 this.$ = instruccionesAPI.nuevoFor($$[$0-8], $$[$0-7], $$[$0-4], $$[$0-1]);
break;
case 41: case 42:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 44: case 45: case 46:
this.$=$$[$0];
break;
case 49:
this.$ = instruccionesAPI.nuevoCase($$[$0-2], $$[$0]);
break;
case 50:
this.$ = instruccionesAPI.nuevoDefault($$[$0]);
break;
case 51:
this.$ ="NO DEFAULT CLAUSE"
break;
case 52:
 this.$ = $$[$0];
break;
case 53:
 this.$ = "No Else Clause"; 
break;
case 54:
this.$ = instruccionesAPI.nuevoElseIf($$[$0-5], $$[$0-2]);
break;
case 55:
this.$ =  instruccionesAPI.nuevoElse($$[$0-1]);
break;
case 56: case 57: case 58: case 59: case 60:
 this.$ = instruccionesAPI.nuevaDeclaracion($$[$0-3], $$[$0-2], $$[$0-1]);
break;
case 62:
 this.$ = "sin inicializar"; 
break;
case 63:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 64:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA); 
break;
case 65:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA); 
break;
case 66:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION); 
break;
case 67:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION); 
break;
case 68:
 this.$ = $$[$0-1]; 
break;
case 69: case 70:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]), TIPO_VALOR.NUMERO); 
break;
case 71:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CARACTER); 
break;
case 73:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.TRUE); 
break;
case 74:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.FALSE); 
break;
case 75:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR); 
break;
case 76:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR); 
break;
case 77:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 78:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 79:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUAL_IGUAL); 
break;
case 80:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DISTINTO); 
break;
case 81:
this.$ = $$[$0]
break;
case 82:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND); 
break;
case 83:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR); 
break;
case 84:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 85:
 this.$ = instruccionesAPI.nuevaCondicion($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,10:$V2},{1:[3]},{2:$V0,5:[1,7],6:8,7:$V1,10:$V2},o($V3,[2,3]),{8:[1,9]},{8:[1,10]},{9:[1,11],13:[1,12]},{1:[2,1]},o($V3,[2,2]),{9:[1,13]},{11:[1,14]},o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,4]),{12:15,14:16,15:17,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{13:[1,25],14:26,15:17,16:$V4,17:$V5,23:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),{8:[1,27],22:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},o($V3,[2,5]),o($Vb,[2,8]),{18:[1,34]},{18:[1,35]},{9:$Vc,18:$Vd,24:36,29:37,34:$Ve},{9:$Vc,18:$Vd,24:40,29:37,34:$Ve},{9:$Vc,18:$Vd,24:41,29:37,34:$Ve},{9:$Vc,18:$Vd,24:42,29:37,34:$Ve},{9:$Vc,18:$Vd,24:43,29:37,34:$Ve},{19:44,20:$Vf,23:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk},{20:[1,50]},o($Vb,[2,14]),{9:[1,51]},{19:52,20:$Vf,23:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk},{8:$Vl,18:$Vm,35:53,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),{20:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{11:[1,68]},o($Vb,[2,19]),{20:[1,69]},{9:[2,61],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{8:$Vl,18:$Vm,35:74,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:75,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},o($Vx,[2,69]),o($Vx,[2,70]),o($Vx,[2,71]),o($Vx,[2,72]),o($Vx,[2,73]),o($Vx,[2,74]),{11:[1,76]},{20:$Vy,30:77,31:$Vz},{20:$Vy,30:79,31:$Vz},{20:$Vy,30:80,31:$Vz},{20:$Vy,30:81,31:$Vz},{20:$Vy,30:82,31:$Vz},{8:$VA,21:83,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{11:[1,96]},{8:$Vl,18:$Vm,35:97,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:98,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:99,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:100,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},o($Vx,[2,63]),{20:[1,101],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{8:$VA,21:102,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{20:[2,21]},{23:[1,103],25:[1,104],26:[1,105],27:[1,106],28:[1,107]},{20:[2,22]},{20:[2,23]},{20:[2,24]},{20:[2,25]},{8:$VA,13:[1,108],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($VK,[2,34]),o($VK,[2,35]),{34:[1,110]},{18:[1,111]},{18:[1,112]},{18:[1,113]},{18:[1,114]},{8:[1,115]},{8:[1,116]},{8:[1,117]},{8:[1,118]},{8:[1,119]},{8:$VA,21:120,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($VL,[2,64],{56:$Vv,57:$Vw}),o($VL,[2,65],{56:$Vv,57:$Vw}),o($Vx,[2,66]),o($Vx,[2,67]),o($Vx,[2,68]),{8:$VA,13:[1,121],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:[1,122]},{8:[1,123]},{8:[1,124]},{8:[1,125]},{8:[1,126]},o($Vb,[2,13]),o($VK,[2,33]),{8:$Vl,18:$Vm,35:127,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:131,37:128,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:129,72:$VM},{8:$Vl,18:$Vm,35:131,37:132,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:129,72:$VM},{8:$Vl,18:$Vm,35:133,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:[1,137],23:[1,135],25:[1,136],44:134},{9:$Vc,29:138,34:$Ve},{9:$Vc,29:139,34:$Ve},{9:$Vc,29:140,34:$Ve},{9:$Vc,29:141,34:$Ve},{9:$Vc,29:142,34:$Ve},{8:$VA,13:[1,143],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($Vb,[2,12]),{20:$Vy,30:144,31:$Vz},{20:$Vy,30:145,31:$Vz},{20:$Vy,30:146,31:$Vz},{20:$Vy,30:147,31:$Vz},{20:$Vy,30:148,31:$Vz},{9:[1,149],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{20:[1,150]},o($VN,[2,85],{70:[1,151],71:[1,152]}),{8:$Vl,18:$Vm,35:131,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:153},o($VO,[2,81],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,64:[1,154],65:[1,155],66:[1,156],67:[1,157],68:[1,158],69:[1,159]}),{20:[1,160]},{20:[1,161],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{8:$Vl,18:$Vm,35:131,37:162,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:129,72:$VM},{8:[1,163]},{8:[1,164]},{34:[1,165]},{9:[1,166]},{9:[1,167]},{9:[1,168]},{9:[1,169]},{9:[1,170]},o($Vb,[2,20]),{20:[2,27]},{20:[2,28]},{20:[2,29]},{20:[2,30]},{20:[2,31]},o($VK,[2,36]),{11:[1,171]},{8:$Vl,18:$Vm,35:131,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:172},{8:$Vl,18:$Vm,35:131,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:173},o($VN,[2,84]),{8:$Vl,18:$Vm,35:174,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:175,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:176,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:177,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:178,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:179,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{11:[1,180]},{11:[1,181]},{9:[1,182]},{34:[1,183]},{34:[1,184]},{8:$Vl,18:$Vm,35:185,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),{8:$VA,21:186,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($VN,[2,82]),o($VN,[2,83]),o($VO,[2,75],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VO,[2,76],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VO,[2,77],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VO,[2,78],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VO,[2,79],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),o($VO,[2,80],{54:$Vt,55:$Vu,56:$Vv,57:$Vw}),{8:$VA,21:187,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{41:188,48:189,49:$VP},{8:[1,191]},{8:$Vl,18:$Vm,35:192,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{8:$Vl,18:$Vm,35:193,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{9:[1,194],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{8:$VA,13:[1,195],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$VA,13:[1,196],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{13:[2,51],42:197,48:198,49:$VP,51:[1,199]},o($VQ,[2,48]),{8:$Vl,18:$Vm,35:200,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},{34:[1,204],45:201,46:[1,202],47:[1,203]},{9:[1,205],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{9:[1,206],54:$Vt,55:$Vu,56:$Vv,57:$Vw},o($VR,[2,43]),o($VK,$VS,{38:207,52:$VT}),o($VK,[2,38]),{13:[1,209]},o($VQ,[2,47]),{50:[1,210]},{50:[1,211],54:$Vt,55:$Vu,56:$Vv,57:$Vw},{20:[1,212]},{20:[2,44]},{20:[2,45]},{8:$Vl,18:$Vm,35:213,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs},o($VR,[2,41]),o($VR,[2,42]),o($VK,[2,37]),{11:[1,216],36:[1,215],53:214},o($VK,[2,39]),{8:$VA,21:217,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$VA,21:218,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{11:[1,219]},{20:[2,46],54:$Vt,55:$Vu,56:$Vv,57:$Vw},o($VK,[2,52]),{18:[1,220]},{8:$VA,21:221,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$VA,13:[2,50],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($VQ,[2,49],{33:85,32:109,8:$VA,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,36:$VG,39:$VH,40:$VI,43:$VJ}),{8:$VA,21:222,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$Vl,18:$Vm,35:131,37:223,54:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:129,72:$VM},{8:$VA,13:[1,224],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$VA,13:[1,225],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{20:[1,226]},o($VK,[2,55]),o($VK,[2,40]),{11:[1,227]},{8:$VA,21:228,23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:84,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},{8:$VA,13:[1,229],23:$VB,25:$VC,26:$VD,27:$VE,28:$VF,32:109,33:85,36:$VG,39:$VH,40:$VI,43:$VJ},o($VK,$VS,{38:230,52:$VT}),o($VK,[2,54])],
defaultActions: {7:[2,1],77:[2,21],79:[2,22],80:[2,23],81:[2,24],82:[2,25],144:[2,27],145:[2,28],146:[2,29],147:[2,30],148:[2,31],202:[2,44],203:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
	const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
	const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
	var salida=[];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 23;
break;
case 1:return 25;
break;
case 2:return 27;
break;
case 3:return 28;
break;
case 4:return 26;
break;
case 5:return 62;
break;
case 6:return 61;
break;
case 7:return 10;
break;
case 8:return 7;
break;
case 9:return 36;
break;
case 10:return 52;
break;
case 11:return 40;
break;
case 12:return 49;
break;
case 13:return 51;
break;
case 14:return 'R_BREAK';
break;
case 15:return 'R_CONTINUE';
break;
case 16:return 39;
break;
case 17:return 'R_DO';
break;
case 18:return 43;
break;
case 19:return 17;
break;
case 20:return 'R_RETURN';
break;
case 21:return 22;
break;
case 22:return 'R_SYSTEM';
break;
case 23:return 'R_OUT';
break;
case 24:return 'R_PRINT';
break;
case 25:return 'R_PRINTLN';
break;
case 26: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 'CADENA';
break;
case 27: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 60;
break;
case 28:return 59;
break;
case 29:return 58;
break;
case 30:return 8;
break;
case 31:
break;
case 32:return 'SALTO';
break;
case 33:return 'TAB';
break;
case 34:return 'RETORNO_CARRO';
break;
case 35:return 'BARRA_INVERTIDA';
break;
case 36:return 'COMILLA_DOBLE';
break;
case 37:return 46;
break;
case 38:return 47;
break;
case 39:return "MAS";
break;
case 40:return 54;
break;
case 41:return 56;
break;
case 42:return 57;
break;
case 43:return 'POTENCIA';
break;
case 44:return 'MODULO';
break;
case 45:return 68;
break;
case 46:return 69;
break;
case 47:return 34;
break;
case 48:return 66;
break;
case 49:return 64;
break;
case 50:return 67;
break;
case 51:return 65;
break;
case 52:return 70;
break;
case 53:return 71;
break;
case 54:return 72;
break;
case 55:return 11;
break;
case 56:return 13;
break;
case 57:return 18;
break;
case 58:return 20;
break;
case 59:return 'ABRIR_CORCHETE';
break;
case 60:return 'CERRAR_CORCHETE';
break;
case 61:return 9;
break;
case 62:return 50;
break;
case 63:return 'PUNTO';
break;
case 64:return 31;
break;
case 65:return 5;
break;
case 66: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:"[^\"]*")/,/^(?:'[^\"]?')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}