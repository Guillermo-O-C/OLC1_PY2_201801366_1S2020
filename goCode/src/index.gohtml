<html>

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="estilos.css">
    <link rel="stylesheet" href="jsonview.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    {{/* <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script> */}}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
    <style>
        textarea{
            color:black;
        }
        .content {
            background-color: #c0a247;
            width: 100%;
            height: 90%;
        }
        
        .left {
            background-color: #FFFF;
            width: 50%;
            height: 50%;
            float: left;
        }
        
        .right {
            background-color: #0000;
            width: 50%;
            height: 56%;
            float: right;
        }
        
        .down {
            background-color: #F232;
            width: 100%;
            height: 35%;
            float: down;
        }
        
        .salida {
            width: 100%;
            height: 100%;
        }
        textarea{
            resize: none;
        }
        .dropbtn {
            background-color: #c0a247;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
        }
        
        .dropdown {
            position: relative;
            display: inline-block;
        }
        
        .FileButton {
            display: none;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
        }
        
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }
        
        .dropdown-content a:hover {
            background-color: #ddd;
        }
        
        .FileLoader:hover .FileButton {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }
        
        .dropdown:hover .dropdown-content {
            display: block;
        }
        
        .dropdown:hover .dropbtn {
            background-color: #ffd868;
        }
        /* Style the tab */
        
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        /* Style the buttons inside the tab */
        
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }
        /* Change background color of buttons on hover */
        
        .tab button:hover {
            background-color: #ddd;
        }
        /* Create an active/current tablink class */
        
        .tab button.active {
            background-color: #ccc;
        }
        /* Style the tab content */
        
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
    </style>
    <script>
        function myFunction() {
            var x = document.getElementById('FileLoader');
            if (x.className === "d-none") {
                x.classList.remove("d-none");
                x.classList.add("d-block");
            } else {
                x.classList.remove("d-block");
                x.classList.add("d-none");
            }
        }

        function Salir() {
            self.close();
        }
    </script>
    <script>
        var button = '<button class="close" type="button" title="Remove this page">×</button>';
        var tabID = 1;

        function resetTab() {
            var tabs = $("#tab-list li:not(:first)");
            var len = 1
            $(tabs).each(function(k, v) {
                len++;
                $(this).find('a').html('Tab ' + len + button);
            })
            tabID--;
        }
        $(document).ready(function() {
            $('#btn-add-tab').click(function() {
                tabID++;
                $('#tab-list').append($('<li><a href="#tab' + tabID + '" role="tab" data-toggle="tab" type="button" class="btn btn-info" style="margin-right: 1px;"><span>Tab ' + tabID + '</span> <span class="glyphicon glyphicon-pencil text-muted edit"></span> <button class="close" type="button" title="Remove this page">×</button></a></li>'));
                $('#tab-content').append($('<div class="tab-pane fade" id="tab' + tabID + '"><div id="left"><textarea style="background: url(http://i.imgur.com/2cOaJ.png);background-color: #f1f1f1;background-attachment: local;background-repeat: no-repeat;padding-left: 35px;padding-top: 10px;border-color:#ccc;color: rgb(0, 0, 0); font-size: smaller;"id="entrada' + tabID + '" class="entrada"></textarea><button class="boton" onclick="EnviarEntrada(entrada' + tabID + '.value, consola1, consola2, consola3, variables);">Analizar Entrada</button></div>'));
                $(".edit").click(editHandler);
            });

            $('#tab-list').on('click', '.close', function() {
                var tabID = $(this).parents('a').attr('href');
                $(this).parents('li').remove();
                $(tabID).remove();

                //display first tab
                var tabFirst = $('#tab-list a:first');
                resetTab();
                tabFirst.tab('show');
            });

            var list = document.getElementById("tab-list");
        });

        var editHandler = function() {
            var t = $(this);
            t.css("visibility", "hidden");
            $(this).prev().attr("contenteditable", "true").focusout(function() {
                $(this).removeAttr("contenteditable").off("focusout");
                t.css("visibility", "visible");
            });
        };

        $(".edit").click(editHandler);
    </script>
    <script>
        function printPython() {
            var DownloadLink = document.getElementById("downloadFile");
            var newFile = new File([consola1.value], "SalidaPython.py");
            var direccion = window.URL.createObjectURL(newFile);
            DownloadLink.href = direccion;
            DownloadLink.download = "SalidaPython.py";
            DownloadLink.click();
        }

        function printHTML() {
            var DownloadLink = document.getElementById("downloadFile");
            var newFile = new File([consola2.value], "SalidaHTML.html");
            var direccion = window.URL.createObjectURL(newFile);
            DownloadLink.href = direccion;
            DownloadLink.download = "SalidaHTML.html";
            DownloadLink.click();
        }

        function SaveFile() {
            var NewDocumentName = prompt("Ingresa el nombre del nuevo documento");
            if (NewDocumentName == "" || NewDocumentName == null) {
                alert("No se ha guardado el archivo.");
            } else {
                var DownloadLink = document.getElementById("downloadFile");
                if (tabID == 1) {
                    var TextFile = document.getElementById("entrada");
                    var newFile = new File([TextFile.value], NewDocumentName + ".cs");
                } else {
                    var TextFile = document.getElementById("entrada" + tabID);
                    var newFile = new File([TextFile.value], NewDocumentName + ".cs");
                }
                var direccion = window.URL.createObjectURL(newFile);
                DownloadLink.href = direccion;
                DownloadLink.download = NewDocumentName + ".cs";
                DownloadLink.click();
            }

        }
    </script>
    
    <script>
        var AST_COLLECTION;
        function DataMessenger() {
            const output = "";
            AST_COLLECTION =[];
            var xml = new XMLHttpRequest();
            xml.open("POST", "http://localhost:3000/analizar", true);
            xml.setRequestHeader('Content-Type', 'application/json');
            xml.onreadystatechange = function() {
                if (xml.readyState == XMLHttpRequest.DONE) {
                   // alert("yasta");
                    AST_COLLECTION.push(xml.responseText);
                    var p = AST_COLLECTION[0];
                    p = JSON.parse(p);
                    console.log(p);
                    console.log(p.AST);
                    console.log(p.Errores);
                    document.getElementById('salida').value="";
                    if(p.Errores=="undefined"){
                         document.getElementById('salida').value="El analizador no se pudo recuperar del error";
                    }else{
                        if(p.Errores.length==0){
                            document.getElementById('salida').value="El análisis ha finalizado correctamente";
                        }
                        for(var i =0;i<p.Errores.length;i++){
                            document.getElementById('salida').value+=p.Errores[i]+"\n";
                        }
                    }
                }
            }
            var text = document.getElementById("original").value;
            xml.send(JSON.stringify({
                original: text
            }));
        }
        function PrintAST(dataStr) {  
            var tree = document.createElement('script');
            tree.innerHTML = "function myFunction(){let data = \'"+dataStr+"\'; let target = '.root'; jsonView.format(data, target);}";
            var content=document.getElementById('scripts').value;/*
            alert(content);
            var win = window.open("", "newWindow", "width=400, height=200");
            var head = document.createElement('head');
            head.outerHTML="<head>"+content+tree.outerHTML+"</head>";
            win.document.head.outerHTML = head.outerHTML;
            win.document.body.onload="myFunction();";
            win.document.body.innerHTML = '<div class="root"></div>';*/
            //win.document.innerHTML.write('<html><head>'+content+tree.outerHTML+'</head><body onload="myFunction()"><div class="root"></div></body></html>');
            console.log("<html><head>"+content+tree.outerHTML+"</head><body onload=\"myFunction()\"><div class=\"root\"></div></body></html>");
            var DownloadLink = document.getElementById("downloadFile");
            var newFile = new File(["<html><head>"+content+tree.outerHTML+"</head><body onload=\"myFunction()\"><div class=\"root\"></div></body></html>"], "SalidaPython.py");
            var direccion = window.URL.createObjectURL(newFile);
            DownloadLink.href = direccion;
            DownloadLink.download = "AST.html";
            DownloadLink.click();
        }
        function PrintTrees(){
            for (var i =0; i <AST_COLLECTION.length;i++){
                PrintAST(JSON.stringify(JSON.parse(AST_COLLECTION[i]).AST));
            }
        }
    </script>
    <script>
    

    </script>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <a class="navbar-brand" href="#">Antennae Java</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <svg class="bi bi-archive-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15h9.286zM6 7a.5.5 0 000 1h4a.5.5 0 000-1H6zM.8 1a.8.8 0 00-.8.8V3a.8.8 0 00.8.8h14.4A.8.8 0 0016 3V1.8a.8.8 0 00-.8-.8H.8z" clip-rule="evenodd"/>
                      </svg>
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#" id="btn-add-tab">Nuevo Documento en blanco</a>
                        <a class="dropdown-item" href="#" id="UploadFile" onclick="myFunction()">Abrir Documento</a>
                        <a class="dropdown-item" href="#" id="UploadFile" onclick="SaveFile()">Guardar</a>
                        <a class="dropdown-item" href="#" id="UploadFile" onclick="SaveFile()">Guardar Como</a>
                    </div>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <svg class="bi bi-files" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M3 2h8a2 2 0 012 2v10a2 2 0 01-2 2H3a2 2 0 01-2-2V4a2 2 0 012-2zm0 1a1 1 0 00-1 1v10a1 1 0 001 1h8a1 1 0 001-1V4a1 1 0 00-1-1H3z" clip-rule="evenodd"/>
                            <path d="M5 0h8a2 2 0 012 2v10a2 2 0 01-2 2v-1a1 1 0 001-1V2a1 1 0 00-1-1H5a1 1 0 00-1 1H3a2 2 0 012-2z"/>
                          </svg>
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="#" onclick="printPython()">Reportes</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="printHTML()">Salida HTML</a>
                    </div>
                </li>
            </ul>
        </div>
        </div>
        <div id="FileLoader" class="d-none">
            <input type="file" id="fileinput">
            <script type="text/javascript">
                function readSingleFile(evt) {
                    var f = evt.target.files[0];
                    if (f) {
                        var r = new FileReader();
                        r.onload = function(e) {
                            var contents = e.target.result;
                            document.getElementById('entrada' + tabID).value = contents;
                            var els = document.querySelectorAll("a[href='#tab" + tabID + "']");
                            els[0].textContent = f.name;

                        }
                        r.readAsText(f);
                        myFunction();
                    } else {
                        alert("No se pudo cargar el archivo, inténtalo de nuevo.");
                    }
                }

                document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
            </script>

    </nav>
    <div class="content">
        <div class="left"><textarea id="original" name="original" style="width:100%; height:100%;" onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'\t'+v.substring(e);this.selectionStart=this.selectionEnd=s+1;return false;}"></textarea></div>
        <div class="right">
            <!--Nav tabs -->
            <ul id="tab-list" class="nav nav-tabs" role="tablist">

                <li>
                    </p>
                </li>

                <li class="active"><a href="#tab1" role="tab" data-toggle="tab" type="button" class="btn btn-info" style="margin-right: 1px;"><span>Tab 1 </span><span class="glyphicon glyphicon-pencil text-muted edit"></span></a></li>
            </ul>
            <!--  Tab panes  -->
            <div id="tab-content" class="tab-content">
                <div class="tab-pane fade in active" id="tab1">
                    <div>
                        <textarea id="entrada1" name="entrada1" class="entrada" style="width:100%; height:80%;"></textarea>
                    </div>
                </div>
            </div>
        </div>
        <button class="boton" onclick="DataMessenger();">Ejecutar Análisis</button>
        <div class="down">
            <textarea class="salida" name="salida" id="salida" disabled></textarea>
        </div>
    </div>
        <button class="boton" onclick="PrintTrees();">Generar AST</button>
        <div class="root"></div>
        <textarea  id="scripts" style="display: none;">
                <meta charset="UTF-8">
                        <style>
                                            body {
                            font-family: 'Open Sans';
                            font-size: 16px;
                            background-color: #fff;
                            color: #808080;
                            box-sizing: border-box;
                        }

                        .line {
                            margin: 4px 0;
                            display: flex;
                            justify-content: flex-start;
                        }

                        .caret-icon {
                            width: 18px;
                            text-align: center;
                            cursor: pointer;
                        }

                        .empty-icon {
                            width: 18px;
                        }

                        .json-type {
                            margin-right: 4px;
                            margin-left: 4px;
                        }

                        .json-key {
                            color: #444;
                            margin-right: 4px;
                            margin-left: 4px;
                        }

                        .json-index {
                            margin-right: 4px;
                            margin-left: 4px;
                        }

                        .json-separator {

                        }

                        .json-value {
                            margin-left: 8px;
                        }

                        .json-number {
                            color: #f9ae58;
                        }

                        .json-boolean {
                            color: #ec5f66;
                        }

                        .json-string {
                            color: #86b25c;
                        }

                        .json-size {
                            margin-right: 4px;
                            margin-left: 4px;
                        }

                        .hide {
                            display: none;
                        }

                        .fas {
                            display: inline-block;
                            width: 0;
                            height: 0;
                            border-style: solid;
                        }

                        .fa-caret-down {
                            border-width: 6px 5px 0 5px;
                            border-color: #808080 transparent
                        }

                        .fa-caret-right {
                            border-width: 5px 0 5px 6px;
                            border-color: transparent transparent transparent #808080;
                        }

                        </style>
                        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
                        <script>
                            (function() {
                                'use strict';
                                /**
                                * Create html element
                                * @param {String} type html element 
                                * @param {Object} config
                                */
                                function createElement(type, config) {
                                    const htmlElement = document.createElement(type);

                                    if (config === undefined) {
                                        return htmlElement;
                                    }

                                    if (config.className) {
                                        htmlElement.className = config.className;
                                    }

                                    if (config.content) {
                                        htmlElement.textContent = config.content;
                                    }

                                    if (config.children) {
                                        config.children.forEach((el) => {
                                            if (el !== null) {
                                                htmlElement.appendChild(el);
                                            }
                                        });
                                    }

                                    return htmlElement;
                                }


                                /**
                                * @param {Object} node
                                * @return {HTMLElement}
                                */
                                function createExpandedElement(node) {
                                    const iElem = createElement('i');

                                    if (node.expanded) {
                                        iElem.className = 'fas fa-caret-down';
                                    } else {
                                        iElem.className = 'fas fa-caret-right';
                                    }

                                    const caretElem = createElement('div', {
                                        className: 'caret-icon',
                                        children: [iElem],
                                    });

                                    const handleClick = node.toggle.bind(node);
                                    caretElem.addEventListener('click', handleClick);

                                    const indexElem = createElement('div', {
                                        className: 'json-index',
                                        content: node.key,
                                    });

                                    const typeElem = createElement('div', {
                                        className: 'json-type',
                                        content: node.type,
                                    });

                                    const keyElem = createElement('div', {
                                        className: 'json-key',
                                        content: node.key,
                                    });

                                    const sizeElem = createElement('div', {
                                        className: 'json-size'
                                    });

                                    if (node.type === 'array') {
                                        sizeElem.innerText = '[' + node.children.length + ']';
                                    } else if (node.type === 'object') {
                                        sizeElem.innerText = '{' + node.children.length + '}';
                                    }

                                    let lineChildren;
                                    if (node.key === null) {
                                        lineChildren = [caretElem, typeElem, sizeElem]
                                    } else if (node.parent.type === 'array') {
                                        lineChildren = [caretElem, indexElem, sizeElem]
                                    } else {
                                        lineChildren = [caretElem, keyElem, sizeElem]
                                    }

                                    const lineElem = createElement('div', {
                                        className: 'line',
                                        children: lineChildren
                                    });

                                    if (node.depth > 0) {
                                        lineElem.style = 'margin-left: ' + node.depth * 24 + 'px;';
                                    }

                                    return lineElem;
                                }


                                /**
                                * @param {Object} node
                                * @return {HTMLElement}
                                */
                                function createNotExpandedElement(node) {
                                    const caretElem = createElement('div', {
                                        className: 'empty-icon',
                                    });

                                    const keyElem = createElement('div', {
                                        className: 'json-key',
                                        content: node.key
                                    });

                                    const separatorElement = createElement('div', {
                                        className: 'json-separator',
                                        content: ':'
                                    });

                                    const valueType = ' json-' + typeof node.value;
                                    const valueContent = String(node.value);
                                    const valueElement = createElement('div', {
                                        className: 'json-value' + valueType,
                                        content: valueContent
                                    });

                                    const lineElem = createElement('div', {
                                        className: 'line',
                                        children: [caretElem, keyElem, separatorElement, valueElement]
                                    });

                                    if (node.depth > 0) {
                                        lineElem.style = 'margin-left: ' + node.depth * 24 + 'px;';
                                    }

                                    return lineElem;
                                }


                                /**
                                * create tree node
                                * @return {Object}
                                */
                                function createNode() {
                                    return {
                                        key: null,
                                        parent: null,
                                        value: null,
                                        expanded: false,
                                        type: null,
                                        children: null,
                                        elem: null,
                                        depth: 0,

                                        setCaretIconRight() {
                                            const icon = this.elem.querySelector('.fas');
                                            icon.classList.replace('fa-caret-down', 'fa-caret-right');
                                        },

                                        setCaretIconDown() {
                                            const icon = this.elem.querySelector('.fas');
                                            icon.classList.replace('fa-caret-right', 'fa-caret-down');
                                        },

                                        hideChildren() {
                                            if (this.children !== null) {
                                                this.children.forEach((item) => {
                                                    item.elem.classList.add('hide');
                                                    if (item.expanded) {
                                                        item.hideChildren();
                                                    }
                                                });
                                            }
                                        },

                                        showChildren() {
                                            if (this.children !== null) {
                                                this.children.forEach((item) => {
                                                    item.elem.classList.remove('hide');
                                                    if (item.expanded) {
                                                        item.showChildren();
                                                    }
                                                });
                                            }
                                        },

                                        toggle: function() {
                                            if (this.expanded) {
                                                this.expanded = false;
                                                this.hideChildren();
                                                this.setCaretIconRight();
                                            } else {
                                                this.expanded = true;
                                                this.showChildren();
                                                this.setCaretIconDown();
                                            }
                                        }
                                    }
                                }


                                /**
                                * Return object length
                                * @param {Object} obj
                                * @return {number}
                                */
                                function getLength(obj) {
                                    let length = 0;
                                    for (let key in obj) {
                                        length += 1;
                                    };
                                    return length;
                                }


                                /**
                                * Return variable type
                                * @param {*} val
                                */
                                function getType(val) {
                                    let type = typeof val;
                                    if (Array.isArray(val)) {
                                        type = 'array';
                                    } else if (val === null) {
                                        type = 'null';
                                    }
                                    return type;
                                }


                                /**
                                * Recursively traverse json object
                                * @param {Object} obj parsed json object
                                * @param {Object} parent of object tree
                                */
                                function traverseObject(obj, parent) {
                                    for (let key in obj) {
                                        const child = createNode();
                                        child.parent = parent;
                                        child.key = key;
                                        child.type = getType(obj[key]);
                                        child.depth = parent.depth + 1;
                                        child.expanded = false;

                                        if (typeof obj[key] === 'object') {
                                            child.children = [];
                                            parent.children.push(child);
                                            traverseObject(obj[key], child);
                                            child.elem = createExpandedElement(child);
                                        } else {
                                            child.value = obj[key];
                                            child.elem = createNotExpandedElement(child);
                                            parent.children.push(child);
                                        }
                                    }
                                }


                                /**
                                * Create root of a tree
                                * @param {Object} obj Json object
                                * @return {Object}
                                */
                                function createTree(obj) {
                                    const tree = createNode();
                                    tree.type = getType(obj);
                                    tree.children = [];
                                    tree.expanded = true;

                                    traverseObject(obj, tree);
                                    tree.elem = createExpandedElement(tree);

                                    return tree;
                                }


                                /**
                                * Recursively traverse Tree object
                                * @param {Object} node
                                * @param {Callback} callback
                                */
                                function traverseTree(node, callback) {
                                    callback(node);
                                    if (node.children !== null) {
                                        node.children.forEach((item) => {
                                            traverseTree(item, callback);
                                        });
                                    }
                                }


                                /**
                                * Render Tree object
                                * @param {Object} tree
                                * @param {String} targetElem
                                */
                                function render(tree, targetElem) {
                                    let rootElem;
                                    if (targetElem) {
                                        rootElem = document.querySelector(targetElem);
                                    } else {
                                        rootElem = document.body;
                                    }

                                    traverseTree(tree, (node) => {
                                        if (!node.expanded) {
                                            node.hideChildren();
                                        }
                                        rootElem.appendChild(node.elem);
                                    });
                                }


                                /* Export jsonView object */
                                window.jsonView = {
                                    /**
                                    * Render JSON into DOM container
                                    * @param {String} jsonData
                                    * @param {String} targetElem
                                    */
                                    format: function(jsonData, targetElem) {
                                        let parsedData = jsonData;
                                        if (typeof jsonData === 'string' || jsonData instanceof String) parsedData = JSON.parse(jsonData);
                                        const tree = createTree(parsedData);
                                        render(tree, targetElem);
                                    }
                                }

                            })();
                        </script>
    </textarea>
        <a id="downloadFile" style="display: none;"></a> 
</body>
</html>